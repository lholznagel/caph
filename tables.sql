CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

DROP TABLE IF EXISTS asset CASCADE;
DROP TABLE IF EXISTS asset_blueprint CASCADE;
DROP TABLE IF EXISTS asset_name CASCADE;
DROP TABLE IF EXISTS blueprint CASCADE;
DROP TABLE IF EXISTS blueprint_material CASCADE;
DROP TABLE IF EXISTS blueprint_skill CASCADE;
DROP TABLE IF EXISTS character CASCADE;
DROP TABLE IF EXISTS item CASCADE;
DROP TABLE IF EXISTS login CASCADE;
DROP TABLE IF EXISTS reprocess CASCADE;
DROP TABLE IF EXISTS schematic CASCADE;
DROP TABLE IF EXISTS schematic_material CASCADE;
DROP TABLE IF EXISTS blueprint_flat CASCADE;
DROP TABLE IF EXISTS blueprint_raw CASCADE;
DROP TABLE IF EXISTS blueprint_tree CASCADE;
DROP TABLE IF EXISTS blueprint_job CASCADE;
DROP TABLE IF EXISTS industry_job CASCADE;
DROP TABLE IF EXISTS project_template CASCADE;
DROP TABLE IF EXISTS project_template_product CASCADE;
DROP TABLE IF EXISTS project_template_container CASCADE;
DROP TABLE IF EXISTS station CASCADE;
DROP TABLE IF EXISTS system CASCADE;

--------------------------------------------------------------------------------
--                  SDE tables
--------------------------------------------------------------------------------

-- Provided by SDE
--
-- Breakdown of all items that can be reprocess, their return if reprocessing
-- was 100%
CREATE TABLE reprocess(
    -- TypeID of the item that is reprocessed
    type_id     INTEGER NOT NULL,
    -- TypeID of the material that is produced by reprocessing the item
    material_id INTEGER NOT NULL,
    quantity    INTEGER NOT NULL,

    PRIMARY KEY (type_id, material_id),
    FOREIGN KEY (type_id)
        REFERENCES item(type_id)
        ON DELETE CASCADE
);

-- Provided by SDE
CREATE TABLE blueprint(
    id                     UUID    NOT NULL DEFAULT uuid_generate_v4(),

    type_id                INTEGER NOT NULL,
    limit_                 INTEGER NOT NULL,

    -- Time
    copy                   INTEGER,
    invention              INTEGER,
    manufacture            INTEGER,
    reaction               INTEGER,
    research_material      INTEGER,
    research_time          INTEGER,

    PRIMARY KEY (id),
    UNIQUE (type_id)
);

-- Provided by SDE
CREATE TABLE blueprint_material(
    blueprint              UUID               NOT NULL,

    activity               SMALLINT           NOT NULL,

    type_id                INTEGER            NOT NULL,
    quantity               INTEGER            NOT NULL,
    is_product             BOOLEAN            NOT NULL,
    probability            REAL,

    PRIMARY KEY (blueprint, type_id, activity),
    FOREIGN KEY (blueprint)
        REFERENCES blueprint (id)
        ON DELETE CASCADE
);

-- Provided by SDE
CREATE TABLE blueprint_skill(
    blueprint              UUID    NOT NULL,

    activity               SMALLINT           NOT NULL,

    type_id                INTEGER NOT NULL,
    level                  INTEGER NOT NULL,

    PRIMARY KEY (blueprint, type_id, activity),
    FOREIGN KEY (blueprint)
        REFERENCES blueprint (id)
        ON DELETE CASCADE
);

-- Generated by us using SDE data
--
-- Contains the type_id of the produt the blueprint produces and a tree of all
-- required items in a JSON format
CREATE TABLE blueprint_tree(
    type_id INTEGER NOT NULL,
    tree    JSON    NOT NULL,

    PRIMARY KEY (type_id)
);

-- Generated by us using SDE data
-- Only raw materials
CREATE TABLE blueprint_raw(
    -- Item to build
    type_id  INTEGER NOT NULL,

    -- Material item id
    mtype_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,

    PRIMARY KEY (type_id, mtype_id)
);

-- Generated by us using SDE data
-- Flat tree
CREATE TABLE blueprint_flat(
    -- Item to build
    type_id  INTEGER NOT NULL,

    -- Material item id
    mtype_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,

    produces INTEGER NOT NULL,

    PRIMARY KEY (type_id, mtype_id)
);

-- Provided by SDE
CREATE TABLE schematic(
    id                     UUID    NOT NULL DEFAULT uuid_generate_v4(),

    type_id                INTEGER NOT NULL,
    cycle_time             INTEGER NOT NULL,

    PRIMARY KEY (id),
    UNIQUE (type_id)
);

-- Provided by SDE
CREATE TABLE schematic_material(
    schematic              UUID    NOT NULL DEFAULT uuid_generate_v4(),

    type_id                INTEGER NOT NULL,
    is_input               BOOLEAN NOT NULL,
    quantity               INTEGER NOT NULL,

    PRIMARY KEY (schematic, type_id),
    FOREIGN KEY (schematic)
        REFERENCES schematic (id)
        ON DELETE CASCADE
);

-- Provided by SDE and custom user input
-- Every row that has `pos == true` is provided by the user
CREATE TABLE station(
    id           BIGINT  NOT NULL,
    system_id    BIGINT  NOT NULL,

    pos          BOOLEAN NOT NULL DEFAULT FALSE,
    character_id INTEGER,

    name         VARCHAR NOT NULL,
    structure    VARCHAR NOT NULL DEFAULT 'NPC-Station',

    PRIMARY KEY (id)
);

-- Provided by SDE
-- Provides a list of all system names
CREATE TABLE system(
    id          BIGINT  NOT NULL,

    name        VARCHAR NOT NULL,

    PRIMARY KEY(id)
);

CREATE TABLE industry_system (
    system_id  BIGINT           NOT NULL,
    cost_index DOUBLE PRECISION NOT NULL,
    activity   VARCHAR          NOT NULL
);

--------------------------------------------------------------------------------
--                  Character specific tables
--------------------------------------------------------------------------------

-- All assets that the character has
CREATE TABLE asset(
    item_id       BIGINT  NOT NULL,
    location_id   BIGINT  NOT NULL,
    reference_id  BIGINT,

    character_id  INTEGER NOT NULL,
    type_id       INTEGER NOT NULL,
    quantity      INTEGER NOT NULL,

    location_flag VARCHAR NOT NULL,

    PRIMARY KEY (character_id, item_id),

    FOREIGN KEY (character_id)
        REFERENCES character(character_id)
        ON DELETE CASCADE
);

-- Contains all blueprints that a character own with additional information
CREATE TABLE asset_blueprint(
    item_id                 BIGINT NOT NULL,

    -- Type Id of the blueprint
    type_id                 INTEGER NOT NULL,
    -- Product type id
    ptype_id                INTEGER NOT NULL,

    quantity                INTEGER NOT NULL,
    material_efficiency     INTEGER NOT NULL,
    time_efficiency         INTEGER NOT NULL,
    runs                    INTEGER NOT NULL,

    character_id            INTEGER NOT NULL,

    PRIMARY KEY (character_id, item_id),

    FOREIGN KEY (character_id)
        REFERENCES character (character_id)
        ON DELETE CASCADE
);

-- Names for the characters assets, for example ship names
CREATE TABLE asset_name(
    item_id      BIGINT  NOT NULL,
    character_id INTEGER NOT NULL,
    name         VARCHAR NOT NULL,

    PRIMARY KEY (character_id, item_id),

    FOREIGN KEY (character_id)
        REFERENCES character (character_id)
        ON DELETE CASCADE
);

-- Industry jobs that the character has running
CREATE TABLE industry_job(
    character_id  INTEGER NOT NULL,
    job_id        INTEGER NOT NULL,
    type_id       INTEGER NOT NULL,

    activity      INTEGER NOT NULL,

    station_id    BIGINT  NOT NULL,

    end_date      VARCHAR NOT NULL,
    start_date    VARCHAR NOT NULL,

    FOREIGN KEY (character_id)
        REFERENCES character (character_id)
        ON DELETE CASCADE
);

-- Deletes all unsuccessful logins
DELETE FROM login WHERE access_token IS NULL AND refresh_token IS NULL;

--------------------------------------------------------------------------------
--                  Additional indecies
--------------------------------------------------------------------------------
CREATE INDEX asset_type_id            ON asset(type_id);
CREATE INDEX blueprint_type_id        ON blueprint(type_id);
CREATE INDEX industry_system_index    ON industry_system(system_id);
CREATE INDEX industry_activity_index  ON industry_system(activity);
